
evaluationDependsOn ":ui:app"
evaluationDependsOn ":ui:app2"
evaluationDependsOn ":clients:gwtrest"

apply plugin: 'war'
apply plugin: 'appengine'

apply from: './dependencies.gradle'
apply from: './databaseSetup.gradle'
apply from: './buildProperties.gradle'
apply from: './devServer.gradle'


description = 'ActivityInfo Server'


ext {
    // The location of the configuration file to be used 
    // for the app engine dev server
    configFile = project.file("$buildDir/config.properties")
}


appengine {
    downloadSdk = true
    
    // This defines the default value for the httpPort
    // property for all appengine-related tasks.
    // ==> To change this port for your own workstation,
    // set a new value in your personal
    // gradle.properties file
    httpPort = Integer.parseInt(devServerPort)

}

war {
    archiveName = "activityinfo-b${buildNumber}.war"
    classpath = classpath.filter { file ->
        return !file.name.startsWith('guava-gwt') &&
                !file.name.startsWith('gwt-user')
    }
    from(project(':apiDocs').outputDir) {
        into 'apidocs'   
    }
    from(project(':api').outputSpec) {
        into 'apidocs'
    }
    from(project(':ui:app').outputDir) {
        exclude("**/*.symbolMap")
    }
    from(project(':ui:app2').outputDir) {
        exclude("**/*.symbolMap")
    }
}


test {
    systemProperty "testDatabaseName", "testDb"
    systemProperty "testDatabaseUsername", localMySqlUsername
    systemProperty "testDatabasePassword", localMySqlPassword

    maxParallelForks = Math.min(16, Runtime.runtime.availableProcessors());

    doFirst {
        testLogging {
            showStandardStreams = false
            events = ['failed']
        }

        // still have a few tests writing to maven 'target' dir
        project.file('target').mkdirs()
    }
}

compileJava {
    
    doLast {
        ant.taskdef(name: 'hibernateInstrumentation',
                classpath: project.sourceSets.main.compileClasspath.asPath,
                classname: 'org.hibernate.tool.instrument.javassist.InstrumentTask') {

        }
        
        ant.hibernateInstrumentation() {
            fileset(
                    dir: "${project.buildDir}/classes/main",
                    includes: 'org/activityinfo/server/database/hibernate/entity/*.class'
            )
        }
    }
}

processResources {
    inputs.property "project.version", project.version.toString()
    filteringCharset = "UTF-8"
    filter { line ->
        line.replace('$[display.version]', project.version.toString())
            .replace('$[git.commit.id]', commitId)
    }
}

task checkDownloadSize(type: org.activityinfo.gwt.CheckDownloadSizeTask) {
    group = "Verification"
    dependsOn 'compileGwt'
    initialJsDownloadSizeLimit "300kb"
    totalJsDownloadSizeLimit "650kb"
    appCacheDownloadSizeLimit "2000kb"
}

tasks.war.dependsOn ':apiDocs:build'
tasks.war.dependsOn ':ui:app:compileApp'
tasks.war.dependsOn ':ui:app2:compileApp'

task archive(type: org.activityinfo.gcloud.ArchiveArtifactTask) {
    group = "Delivery Pipeline"
    description = "Builds, verifies, and archives the binary WAR that is used by subsequent stages"
    dependsOn 'war'
    archivePath = war.archivePath
}


task downloadBuild {
    description = "Downloads and unpacks a previous build"
    ext {
        warFile = "$buildDir/build${project.buildNumber}.war"
        warDir = "$buildDir/build${project.buildNumber}"
    }

    inputs.property 'build', build
    outputs.file "$buildDir/build${project.buildNumber}.war"

    doLast {

        project.exec {
            commandLine 'gsutil', 'cp', "gs://ai-pipeline/artifacts/activityinfo-b${project.buildNumber}.war", warFile
        }
        ant.unzip(src: warFile, dest: warDir)

    }
}

task deploy(type: com.google.appengine.task.appcfg.UpdateTask) {
    description = "Deploys a build to the staging environment"
    
    def appVersion;

    if(project.buildNumber != 'dev') {
        dependsOn downloadBuild
        explodedAppDirectory = project.file(downloadBuild.warDir)
        appVersion = "b${project.buildNumber}"
        
    } else {
        dependsOn 'appengineExplodeApp'
        appVersion = 'new-website'
    }
    
    dependsOn appengineDownloadSdk


    extraOptions = ["--application=${environment.projectId}", "--version=${appVersion}"]
    oauth2 = true
    
    doFirst {
        if(environment.local) {
            throw new IllegalStateException("You must be provide a target environment using -Penv=<PROJECT_ID>")
        }
    }
}

appengineUpdateQueues {
    extraOptions = ["--application=${environment.projectId}" ]
    oauth2 = true

    doFirst {
        if(environment.local) {
            throw new IllegalStateException("You must be provide a target environment using -Penv=<PROJECT_ID>")
        }
    }
}

task rollback(type: com.google.appengine.task.appcfg.RollbackTask) {
    description = "Rolls back a previous build to the staging environment"
    dependsOn appengineDownloadSdk

    extraOptions = ["--application=${environment.projectId}", '--version=qa']
    oauth2 = true
}
