
evaluationDependsOn ":ui:app"
evaluationDependsOn ":ui:app2"
evaluationDependsOn ":clients:gwtrest"
evaluationDependsOn ":clients:docs"

apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine'

apply from: './dependencies.gradle'
apply from: './databaseSetup.gradle'
apply from: './buildProperties.gradle'
apply from: './devServer.gradle'

description = 'ActivityInfo Server'


ext {
    // The location of the configuration file to be used
    // for the app engine dev server
    configFile = project.file("$buildDir/config.properties")
}

appengine {
    deploy {
        project = environment.projectId
        version = 'qa'
        promote = false

    }
}

war {
    archiveName = "activityinfo-b${buildNumber}.war"
    classpath = classpath.filter { file ->
        return !file.name.startsWith('guava-gwt') &&
                !file.name.startsWith('gwt-user')
    }
    from(project(':clients:docs').outputDir) {
        into 'apidocs'
    }
    from(project(':ui:app').outputDir) {
        exclude("**/*.symbolMap")
    }
    from(project(':ui:app2').outputDir) {
        exclude("**/*.symbolMap")
    }
}


test {
    systemProperty "testDatabaseName", "testDb"
    systemProperty "testDatabaseUsername", localMySqlUsername
    systemProperty "testDatabasePassword", localMySqlPassword

    maxParallelForks = Math.min(16, Runtime.runtime.availableProcessors());

    doFirst {
        testLogging {
            showStandardStreams = false
            events = ['failed']
        }

        // still have a few tests writing to maven 'target' dir
        project.file('target').mkdirs()
    }
}

compileJava {

    doLast {
        ant.taskdef(name: 'hibernateInstrumentation',
                classpath: project.sourceSets.main.compileClasspath.asPath,
                classname: 'org.hibernate.tool.instrument.javassist.InstrumentTask') {

        }

        ant.hibernateInstrumentation() {
            fileset(
                    dir: destinationDir,
                    includes: 'org/activityinfo/server/database/hibernate/entity/*.class'
            )
        }
    }
}

task checkDownloadSize(type: org.activityinfo.gwt.CheckDownloadSizeTask) {
    group = "Verification"
    dependsOn 'compileGwt'
    initialJsDownloadSizeLimit "300kb"
    totalJsDownloadSizeLimit "650kb"
    appCacheDownloadSizeLimit "2000kb"
}

tasks.war.dependsOn ':clients:docs:build'
tasks.war.dependsOn ':ui:app:compileApp'
//tasks.war.dependsOn ':ui:app2:compileApp'

task archive(type: org.activityinfo.gcloud.ArchiveArtifactTask) {
    group = "Delivery Pipeline"
    description = "Builds, verifies, and archives the binary WAR that is used by subsequent stages"
    dependsOn 'war'
    archivePath = war.archivePath
}


task downloadBuild {
    description = "Downloads and unpacks a previous build"
    ext {
        warFile = "$buildDir/build${project.buildNumber}.war"
        warDir = "$buildDir/build${project.buildNumber}"
    }

    inputs.property 'build', build
    outputs.file "$buildDir/build${project.buildNumber}.war"

    doLast {

        project.exec {
            commandLine 'gsutil', 'cp', "gs://ai-pipeline/artifacts/activityinfo-b${project.buildNumber}.war", warFile
        }
        ant.unzip(src: warFile, dest: warDir)

    }
}
