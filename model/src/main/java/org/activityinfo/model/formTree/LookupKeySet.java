package org.activityinfo.model.formTree;

import com.google.common.base.Function;
import com.google.common.base.Optional;
import com.google.common.collect.Iterables;
import org.activityinfo.model.form.FormClass;
import org.activityinfo.model.form.FormField;
import org.activityinfo.model.form.FormInstance;
import org.activityinfo.model.query.ColumnModel;
import org.activityinfo.model.resource.ResourceId;
import org.activityinfo.model.type.RecordRef;
import org.activityinfo.model.type.ReferenceType;
import org.activityinfo.model.type.SerialNumberType;
import org.activityinfo.model.type.enumerated.EnumType;
import org.activityinfo.model.type.primitive.TextType;
import org.activityinfo.promise.Maybe;

import java.util.ArrayList;
import java.util.List;

/**
 * Set of keys that can be used to lookup a value for a reference field.
 *
 * <p>Fields of type {@link ReferenceType} refer to Records in other Forms. In order to be select
 * a value, users need a way to "look up" the ID of a Record. We could of course ask users to the enter
 * the auto-generated RecordId, but that would be difficult.</p>
 *
 * <p>One intuitive way to look up Records is to use the fields that form designers have identified as "keys".</p>
 *
 * <p>In the simplest case, a Form will have a single text key field. Such a reference field will have a single
 * {@link LookupKey}. The user can select one value from the {@code LookupKey} and that will be sufficient to
 * uniquely identify the record.</p>
 *
 * <p>In other cases, a Form might have two text keys, such as "Last Name" and "First Name". Neither key is
 * sufficient to identify a record uniquely, but together they can be used to look up a record.</p>
 */
public class LookupKeySet {

    private List<LookupKey> lookupKeys = new ArrayList<>();
    private List<LookupKey> leafKeys = new ArrayList<>();
    private FormTree formTree;

    public LookupKeySet(FormTree formTree, ReferenceType referenceType) {
        this.formTree = formTree;

        for (ResourceId referenceFormId : referenceType.getRange()) {
            leafKeys.add(addLevels("", formTree.getFormClass(referenceFormId)));
        }
    }

    public LookupKeySet(FormTree formTree, FormField field) {
        this(formTree, (ReferenceType)field.getType());
    }

    private LookupKey addLevels(String labelPrefix, FormClass formClass) {

        ResourceId formId = formClass.getId();

        // if serial number is present, we use that exclusively.
        Optional<FormField> serialNumberField = findSerialNumberField(formClass);
        if(serialNumberField.isPresent()) {
            LookupKey lookupKey = serialNumberLevel(labelPrefix, formId, serialNumberField.get());
            lookupKeys.add(lookupKey);
            return lookupKey;
        }

        LookupKey parentLevel = null;
        String parentFieldId = null;

        // If there is a reference key, then we climb the reference tree recursively.
        Optional<FormField> referenceKey = findReferenceKey(formClass);
        if(referenceKey.isPresent()) {
            ReferenceType referenceType = (ReferenceType) referenceKey.get().getType();
            ResourceId referencedFormId = Iterables.getOnlyElement(referenceType.getRange());
            FormClass referencedFormClass = formTree.getFormClass(referencedFormId);
            parentLevel = addLevels(referencedFormClass.getLabel() + " ", referencedFormClass);
            parentFieldId = referenceKey.get().getId().asString();
        }

        // Now check for text key fields
        for (FormField formField : formClass.getFields()) {
            if(isTextLikeKey(formField)) {
                LookupKey lookupKey = textKeyLevel(labelPrefix, formId, parentLevel, parentFieldId, formField);
                lookupKeys.add(lookupKey);
                parentLevel = lookupKey;
                parentFieldId = null;
            }
        }

        // If there is really no other key fields, then use the autogenerated id as a key
        if (parentLevel == null) {
            parentLevel = idLevel(formClass);
            lookupKeys.add(parentLevel);
        }

        return parentLevel;
    }

    private boolean isTextLikeKey(FormField formField) {
        return formField.isKey() &&
                (formField.getType() instanceof TextType ||
                 formField.getType() instanceof EnumType);
    }


    private int nextKeyIndex() {
        return lookupKeys.size() + 1;
    }


    private LookupKey serialNumberLevel(String labelPrefix, ResourceId formId, FormField field) {
        return new LookupKey(nextKeyIndex(), formId, labelPrefix + field.getLabel(), field.getId().asString());
    }

    private LookupKey textKeyLevel(String labelPrefix,
                                   ResourceId formId,
                                   LookupKey parentLevel,
                                   String parentFieldId,
                                   FormField formField) {
        String levelLabel = labelPrefix + formField.getLabel();

        return new LookupKey(nextKeyIndex(), parentFieldId, parentLevel, formId, levelLabel, formField.getId().asString());
    }

    private LookupKey idLevel(FormClass formSchema) {
        return new LookupKey(nextKeyIndex(), formSchema.getId(), formSchema.getLabel(), ColumnModel.ID_SYMBOL);
    }

    private Optional<FormField> findSerialNumberField(FormClass formClass) {
        for (FormField formField : formClass.getFields()) {
            if(formField.getType() instanceof SerialNumberType) {
                return Optional.of(formField);
            }
        }
        return Optional.absent();
    }

    private Optional<FormField> findReferenceKey(FormClass formClass) {
        for (FormField formField : formClass.getFields()) {
            if(formField.isKey() && formField.getType() instanceof ReferenceType) {
                return Optional.of(formField);
            }
        }
        return Optional.absent();
    }

    public List<LookupKey> getLookupKeys() {
        return lookupKeys;
    }

    /**
     * @return a List of LookupKeys with no children.
     */
    public List<LookupKey> getLeafKeys() {
        return leafKeys;
    }


    /**
     * Composes a human-readable label for a record reference.
     */
    public Maybe<String> label(RecordTree tree, RecordRef ref) {
        Optional<FormInstance> potentialRecord = tree.getRecord(ref).getIfVisible();
        if (potentialRecord.isPresent()) {
            FormInstance record = potentialRecord.get();
            for (LookupKey lookupKey : lookupKeys) {
                if (record.getFormId().equals(lookupKey.getFormId())) {
                    return Maybe.of(lookupKey.label(record));
                }
            }
        }
        return Maybe.notFound();
    }

}
